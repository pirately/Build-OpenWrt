#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: Jeffen
#=================================================

name: Build_OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Projects
      uses: actions/checkout@main

    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/settings/settings.ini"
        echo "WRT_REPO=${WRT_REPO}" >> $GITHUB_ENV
        echo "WRT_BRANCH=${WRT_BRANCH}" >> $GITHUB_ENV
        echo "WRT_TARGET=${WRT_TARGET}" >> $GITHUB_ENV
        echo "WRT_THEME=${WRT_THEME}" >> $GITHUB_ENV
        echo "WRT_NAME=${WRT_NAME}" >> $GITHUB_ENV
        echo "WRT_PLUGIN=${WRT_PLUGIN}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV        
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "INFORMATION_NOTICE=${INFORMATION_NOTICE}" >> $GITHUB_ENV 

    - name: Free Disk Space
      uses: endersonmenezes/free-disk-space@main
      with:
        testing: false
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages_one_command: true

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker image prune -f
        sudo -E apt -yqq update
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E apt -yqq clean
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E systemctl daemon-reload
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: Initialization Values
      run: |
        export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M")
        export WRT_TIME=$(TZ=UTC-8 date +%Y.%m.%d)
        export WRT_SOURCE=$(echo $WRT_REPO | cut -d '/' -f 5-)
        export WRT_VER=$WRT_SOURCE-$WRT_BRANCH
        export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/config/$WRT_TARGET.config)
        echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
        echo "WRT_TIME=$WRT_TIME" >> $GITHUB_ENV
        echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV
        echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
        echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

    - name: Clone Source Code
      run: |
        git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./openwrt

        cd ./openwrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

    - name: Check Caches
      id: check-cache
      uses: actions/cache@main
      with:
        key: ${{env.WRT_VER}}-${{env.WRT_TARGET}}-${{env.WRT_HASH}}
        path: |
          ./openwrt/.ccache
          ./openwrt/staging_dir/host*
          ./openwrt/staging_dir/tool*

    - name: Update Caches
      run: |
        if ${{steps.check-cache.outputs.cache-hit == 'true'}}; then
          sed -i 's/ $(tool.*\/stamp-compile)//g' ./openwrt/Makefile
          sed -i 's/ $(tool.*\/stamp-install)//g' ./openwrt/Makefile

          echo "toolchain skiped done!"
        else
          CACHE_LIST=$(gh cache list --key "$WRT_VER-$WRT_TARGET" | cut -f 1)
          for CACHE_KEY in $CACHE_LIST; do
             gh cache delete $CACHE_KEY
          done

          echo "caches cleanup done!"
        fi

    - name: Update Feeds
      run: |
        cd ./openwrt

        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        git clone https://oauth2:$REPO_TOKEN@github.com/pirately/OpenWrt_Files
        cp -f OpenWrt_Files/diy/banner openwrt/package/base-files/files/etc/banner
        sed -i "s/%D %V, %C/OpenWrt by Jeffen ${WRT_TIME}/g" openwrt/package/base-files/files/etc/banner
        cp -f OpenWrt_Files/scripts/diy.sh $GITHUB_WORKSPACE/scripts
        cp -rf OpenWrt_Files/${{ env.WRT_PLUGIN }}/* ./ && rm -rf OpenWrt_Files
        [ -e files ] && mv files openwrt/files

        find ./ -maxdepth 3 -type f -iregex ".*\(config\|sh\)$" -exec sed -i 's/\r//' {} \; -exec chmod +x {} \;

    - name: Custom Settings
      run: |
        cd ./openwrt/package/

        $GITHUB_WORKSPACE/scripts/packages.sh
        $GITHUB_WORKSPACE/scripts/handles.sh

        cd ../
        rm -rf ./tmp* ./.config*
        cat $GITHUB_WORKSPACE/config/$WRT_TARGET.config $GITHUB_WORKSPACE/config/general.config >> .config
        $GITHUB_WORKSPACE/scripts/settings.sh
        $GITHUB_WORKSPACE/scripts/diy_op.sh
        $GITHUB_WORKSPACE/scripts/diy.sh
        make defconfig -j$(($(nproc)+1))

    - name: Download Packages
      run: |
        cd ./openwrt
        make download -j$(($(nproc)+1))

    - name: Compile the firmware
      id: compile
      run: |
        cd ./openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s &>build.log || (tail -50 build.log; curl -k --data title="❌【$WRT_SOURCE】编译失败" --data desp="我亲爱的✨主人✨：您编译的【$WRT_SOURCE】固件失败了✌️💯💐%0A%0A🎄源码：${WRT_REPO}%0A%0A💕分支：【${WRT_BRANCH}】%0A%0A😋设备：【$WRT_TARGET】%0A%0A🎉插件：【$WRT_PLUGIN】%0A%0A📯仓库号码：【#${{github.run_number}}号】%0A%0A🕗编译时间：($(date +%Y年%m月%d日%H时%M分))" "https://sctapi.ftqq.com/$SCKEY.send"; exit 1)

        echo "status=success" >> $GITHUB_OUTPUT

    - name: Machine Information
      run: |
        cd ./openwrt

        echo "======================="
        lscpu | grep -E "name|Core|Thread"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1
        echo "======================="

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd ./openwrt && mkdir ./upload
        cp -f ./.config ./upload/Config_"${WRT_VER}(${WRT_PLUGIN})_${WRT_DATE}".config
        KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)
        find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\|bin\|rootfs.img.gz\|combined.img.gz\)$" -exec rm -rf {} +

        for TYPE in $WRT_TYPE ; do
          for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
            EXT=$(basename $FILE | cut -d '.' -f 2-)
            NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
            NEW_FILE="$WRT_VER"_"$NAME"_"$WRT_DATE"."$EXT"
            mv -f $FILE ./upload/$NEW_FILE
          done
        done

        find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

        echo "WRT_KVER=${KVER:-none}" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD/upload" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.WRT_VER }}(${{ env.WRT_PLUGIN }})_${{ env.WRT_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Release
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        touch release.txt
        cat >> release.txt << EOF    
        1、源码：${{ env.WRT_REPO }}
        2、分支：${{ env.WRT_BRANCH }}
        3、设备：${{ env.WRT_TARGET }}
        4、内核：${{ env.WRT_KVER }}
        -- Build by Jeffen with Github Actions on ${{ env.WRT_DATE }} for ${{ env.WRT_TARGET }} device
        EOF
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Release
      uses: softprops/action-gh-release@master
      if: env.UPLOAD_RELEASE == 'true' && steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.WRT_VER }}_${{ env.WRT_TARGET }}_${{ env.WRT_DATE }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Push Information Notice
      if: env.SCKEY && env.INFORMATION_NOTICE == 'true'
      run: |
        if [[ "${{steps.compile.outcome}}" == 'success' ]]; then
          curl -k --data title="✌️【$WRT_SOURCE】编译成功" --data desp="我亲爱的✨主人✨：您编译的【$WRT_SOURCE】固件顺利编译完成了✌️💯💐%0A%0A🎄源码：${WRT_REPO}%0A%0A💕分支：【${WRT_BRANCH}】%0A%0A😋设备：【$WRT_TARGET】%0A%0A🔑内核：【${{env.WRT_KVER}}】%0A%0A🎉插件：【$WRT_PLUGIN】%0A%0A📯仓库号码：【#${{github.run_number}}号】%0A%0A🕗编译时间：($(date +%Y年%m月%d日%H时%M分))" "https://sctapi.ftqq.com/$SCKEY.send" 
        fi

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
