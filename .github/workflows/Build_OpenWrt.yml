#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: Jeffen
#=================================================

name: Build_OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Projects
      uses: actions/checkout@main

    - name: Check server performance
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "----------------------------CPU信息-------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-------------------------------硬盘信息-------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/settings/settings.ini"
        echo "WRT_URL=${WRT_URL}" >> $GITHUB_ENV
        echo "WRT_BRANCH=${WRT_BRANCH}" >> $GITHUB_ENV
        echo "WRT_TARGET=${WRT_TARGET}" >> $GITHUB_ENV
        echo "WRT_THEME=${WRT_THEME}" >> $GITHUB_ENV
        echo "WRT_NAME=${WRT_NAME}" >> $GITHUB_ENV
        echo "WRT_IP=${WRT_IP}" >> $GITHUB_ENV
        echo "OPENWRT_APPLICATIONS=${OPENWRT_APPLICATIONS}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV        
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "INFORMATION_NOTICE=${INFORMATION_NOTICE}" >> $GITHUB_ENV 

    - name: Free Disk Space
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* \
          lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
        remove_packages_one_command: true
        remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
          /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* \
          /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* \
          /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
          /var/lib/mysql* /var/log/azure*"
        testing: false

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo -E apt -yqq update
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq install $(sed -n "1{s/\r$//g;p;q}" $GITHUB_WORKSPACE/settings/depends-ubuntu)
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E apt -yqq clean
        sudo -E systemctl daemon-reload
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: Initialization Values
      run: |
        export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M")
        export WRT_TIME=$(date +%Y.%m.%d)
        export WRT_SOURCE=$(echo $WRT_URL | cut -d '/' -f 5-)
        export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/config/$WRT_TARGET.config)
        echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
        echo "WRT_TIME=$WRT_TIME" >> $GITHUB_ENV
        echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV
        echo "WRT_TARGET=$WRT_TARGET" >> $GITHUB_ENV
        echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
        echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV
        echo "WRT_IP=$WRT_IP" >> $GITHUB_ENV

    - name: Clone OpenWrt Source Code
      run: |
        git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_URL ./openwrt

    - name: Check Scripts
      run: |
        find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

    - name: Update Feeds
      run: |
        cd ./openwrt

        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Custom Packages
      run: |
        cd ./openwrt/package/

        $GITHUB_WORKSPACE/scripts/packages.sh
        $GITHUB_WORKSPACE/scripts/handles.sh

    - name: Load custom configuration
      run: |
        git clone https://oauth2:$REPO_TOKEN@github.com/pirately/OpenWrt_Files
        cp -f OpenWrt_Files/diy/banner openwrt/package/base-files/files/etc/banner
        sed -i "s/%D %V, %C/OpenWrt $(date +'%Y.%m.%d') by Jeffen/g" openwrt/package/base-files/files/etc/banner
        cp -f OpenWrt_Files/scripts/diy.sh $GITHUB_WORKSPACE/scripts
        cp -rf OpenWrt_Files/${{ env.OPENWRT_APPLICATIONS }}/* ./ && rm -rf OpenWrt_Files
        [ -e files ] && mv files openwrt/files
        cd openwrt
        rm -rf ./tmp* ./.config*
        cat $GITHUB_WORKSPACE/config/$WRT_TARGET.config $GITHUB_WORKSPACE/config/general.config >> .config
        chmod +x $GITHUB_WORKSPACE/scripts/settings.sh && $GITHUB_WORKSPACE/scripts/settings.sh
        chmod +x $GITHUB_WORKSPACE/scripts/diy.sh && $GITHUB_WORKSPACE/scripts/diy.sh
        chmod +x $GITHUB_WORKSPACE/scripts/diy_op.sh && $GITHUB_WORKSPACE/scripts/diy_op.sh
        make defconfig

    - name: Cleanup Toolchain
      run: |
        cd ./openwrt
        make dirclean

    - name: Download Packages
      run: |
        cd ./openwrt
        make download -j$(($(nproc)+1))

    - name: Cache
      uses: pirately/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.WRT_SOURCE }}
        clean: ${{ contains(github.event.action, 'nocache') }}
        prefix: ${{ github.workspace }}/openwrt

    - name: Check space usage
      if: (!cancelled())
      run: |
        echo "硬盘详情："
        df -hT

    - name: Compile the firmware
      id: compile
      run: |
        cd ./openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s &>build.log || (tail -50 build.log; curl -k --data title="❌【$WRT_SOURCE】编译失败" --data desp="我亲爱的✨主人✨：您编译的【$WRT_SOURCE】固件失败了✌️💯💐%0A%0A🎄源码：${WRT_URL}%0A%0A💕分支：【${WRT_BRANCH}】%0A%0A😋设备：【$WRT_TARGET】%0A%0A🎉插件：【$OPENWRT_APPLICATIONS】%0A%0A📯仓库号码：【#${{github.run_number}}号】%0A%0A🕗编译时间：($(date +%Y年%m月%d日%H时%M分))" "https://sctapi.ftqq.com/$SCKEY.send"; exit 1)

        echo "status=success" >> $GITHUB_OUTPUT

        echo "========================================"
        echo "硬盘详情："
        echo "========================================"
        df -h

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd ./openwrt && mkdir ./upload
        rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\|bin\|rootfs.img.gz\|rootfs.tar.gz\|combined.img.gz\)$")
        cp -rf $(find ./bin/targets/ -type f -iname "*.*") ./upload/
        cp -rf ./.config ./upload/Config_"$WRT_TARGET"_"$WRT_SOURCE"_"$WRT_DATE".txt
        cd ./upload
        # chmod +x $GITHUB_WORKSPACE/scripts/renames.sh && $GITHUB_WORKSPACE/scripts/renames.sh
        for var in $WRT_TYPE ; do
          for file in $(find ./ -type f -iname "*$var*.*" ! -iname "*.txt") ; do
            ext=$(basename "$file" | cut -d '.' -f 2-)
            name=$(basename "$file" | cut -d '.' -f 1 | grep -io "\($var\).*")
            new_file="$WRT_SOURCE"_"$name"_"$WRT_DATE"."$ext"
            mv -f "$file" "$new_file"
          done
        done
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_${{ env.WRT_SOURCE }}_firmware(${{ env.OPENWRT_APPLICATIONS }})_${{ env.WRT_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Release
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        touch release.txt
        cat >> release.txt << EOF    
        1、源码：${{ env.WRT_URL }}
        2、分支：${{ env.WRT_BRANCH }}
        3、设备：${{ env.WRT_TARGET }}
        -- Build by Jeffen with Github Actions on ${{ env.WRT_DATE }} for ${{ env.WRT_TARGET }} device
        EOF
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Release
      uses: softprops/action-gh-release@master
      if: env.UPLOAD_RELEASE == 'true' && steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.WRT_SOURCE }}_${{ env.WRT_TARGET }}_${{ env.WRT_DATE }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Push Information Notice
      if: env.SCKEY && env.INFORMATION_NOTICE == 'true'
      run: |
        if [[ "${{steps.compile.outcome}}" == 'success' ]]; then
          curl -k --data title="✌️【$WRT_SOURCE】编译成功" --data desp="我亲爱的✨主人✨：您编译的【$WRT_SOURCE】固件顺利编译完成了✌️💯💐%0A%0A🎄源码：${WRT_URL}%0A%0A💕分支：【${WRT_BRANCH}】%0A%0A😋设备：【$WRT_TARGET】%0A%0A🎉插件：【$OPENWRT_APPLICATIONS】%0A%0A📯仓库号码：【#${{github.run_number}}号】%0A%0A🕗编译时间：($(date +%Y年%m月%d日%H时%M分))" "https://sctapi.ftqq.com/$SCKEY.send" 
        fi

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
